package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/99designs/gqlgen/graphql"
	"github.com/google/uuid"
	"github.com/shiftregister-vg/card-craft/internal/graph/generated"
	"github.com/shiftregister-vg/card-craft/internal/models"
	"github.com/shiftregister-vg/card-craft/internal/types"
)

// ID is the resolver for the id field.
func (r *cardResolver) ID(ctx context.Context, obj *models.Card) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *cardResolver) CreatedAt(ctx context.Context, obj *models.Card) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *cardResolver) UpdatedAt(ctx context.Context, obj *models.Card) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// Cards is the resolver for the cards field.
func (r *cardSearchResultResolver) Cards(ctx context.Context, obj *types.CardSearchResult) ([]*models.Card, error) {
	panic(fmt.Errorf("not implemented: Cards - cards"))
}

// ID is the resolver for the id field.
func (r *collectionResolver) ID(ctx context.Context, obj *models.Collection) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// UserID is the resolver for the userId field.
func (r *collectionResolver) UserID(ctx context.Context, obj *models.Collection) (string, error) {
	panic(fmt.Errorf("not implemented: UserID - userId"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *collectionResolver) CreatedAt(ctx context.Context, obj *models.Collection) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *collectionResolver) UpdatedAt(ctx context.Context, obj *models.Collection) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// ID is the resolver for the id field.
func (r *collectionCardResolver) ID(ctx context.Context, obj *models.CollectionCard) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// CollectionID is the resolver for the collectionId field.
func (r *collectionCardResolver) CollectionID(ctx context.Context, obj *models.CollectionCard) (string, error) {
	panic(fmt.Errorf("not implemented: CollectionID - collectionId"))
}

// CardID is the resolver for the cardId field.
func (r *collectionCardResolver) CardID(ctx context.Context, obj *models.CollectionCard) (string, error) {
	panic(fmt.Errorf("not implemented: CardID - cardId"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *collectionCardResolver) CreatedAt(ctx context.Context, obj *models.CollectionCard) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *collectionCardResolver) UpdatedAt(ctx context.Context, obj *models.CollectionCard) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// GameSpecificDetails is the resolver for the gameSpecificDetails field.
func (r *collectionCardResolver) GameSpecificDetails(ctx context.Context, obj *models.CollectionCard) (*string, error) {
	// Get the card to determine the game
	card, err := r.cardStore.FindByID(obj.CardID)
	if err != nil {
		return nil, err
	}

	// Fetch game-specific details based on the game type
	var gameSpecificDetails map[string]interface{}
	switch strings.ToLower(card.Game) {
	case "mtg":
		mtgCard, err := r.mtgStore.GetCardByCardID(ctx, card.ID.String())
		if err != nil {
			return nil, err
		}
		gameSpecificDetails = map[string]interface{}{
			"manaCost":      mtgCard.ManaCost,
			"cmc":           mtgCard.CMC,
			"typeLine":      mtgCard.TypeLine,
			"oracleText":    mtgCard.OracleText,
			"power":         mtgCard.Power,
			"toughness":     mtgCard.Toughness,
			"loyalty":       mtgCard.Loyalty,
			"colors":        mtgCard.Colors,
			"colorIdentity": mtgCard.ColorIdentity,
			"keywords":      mtgCard.Keywords,
			"legalities":    mtgCard.Legalities,
			"reserved":      mtgCard.Reserved,
			"foil":          mtgCard.Foil,
			"nonfoil":       mtgCard.Nonfoil,
			"promo":         mtgCard.Promo,
			"reprint":       mtgCard.Reprint,
			"variation":     mtgCard.Variation,
			"setType":       mtgCard.SetType,
			"releasedAt":    mtgCard.ReleasedAt,
		}
	case "pokemon":
		pokemonCard, err := r.pokemonStore.FindByCardID(ctx, card.ID.String())
		if err != nil {
			return nil, err
		}
		gameSpecificDetails = map[string]interface{}{
			"hp":          pokemonCard.HP,
			"types":       pokemonCard.Types,
			"evolvesFrom": pokemonCard.EvolvesFrom,
			"evolvesTo":   pokemonCard.EvolvesTo,
			"abilities":   pokemonCard.Abilities,
			"attacks":     pokemonCard.Attacks,
			"weaknesses":  pokemonCard.Weaknesses,
			"resistances": pokemonCard.Resistances,
			"retreatCost": pokemonCard.RetreatCost,
			"subtypes":    pokemonCard.Subtypes,
			"supertype":   pokemonCard.Supertype,
			"rules":       pokemonCard.Rules,
		}
	}

	// Convert the map to a JSON string
	jsonBytes, err := json.Marshal(gameSpecificDetails)
	if err != nil {
		return nil, err
	}

	jsonStr := string(jsonBytes)
	return &jsonStr, nil
}

// ID is the resolver for the id field.
func (r *deckResolver) ID(ctx context.Context, obj *models.Deck) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// UserID is the resolver for the userId field.
func (r *deckResolver) UserID(ctx context.Context, obj *models.Deck) (string, error) {
	panic(fmt.Errorf("not implemented: UserID - userId"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *deckResolver) CreatedAt(ctx context.Context, obj *models.Deck) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *deckResolver) UpdatedAt(ctx context.Context, obj *models.Deck) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// Cards is the resolver for the cards field.
func (r *deckResolver) Cards(ctx context.Context, obj *models.Deck) ([]*models.DeckCard, error) {
	panic(fmt.Errorf("not implemented: Cards - cards"))
}

// ID is the resolver for the id field.
func (r *deckCardResolver) ID(ctx context.Context, obj *models.DeckCard) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// DeckID is the resolver for the deckId field.
func (r *deckCardResolver) DeckID(ctx context.Context, obj *models.DeckCard) (string, error) {
	panic(fmt.Errorf("not implemented: DeckID - deckId"))
}

// CardID is the resolver for the cardId field.
func (r *deckCardResolver) CardID(ctx context.Context, obj *models.DeckCard) (string, error) {
	panic(fmt.Errorf("not implemented: CardID - cardId"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *deckCardResolver) CreatedAt(ctx context.Context, obj *models.DeckCard) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *deckCardResolver) UpdatedAt(ctx context.Context, obj *models.DeckCard) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// Card is the resolver for the card field.
func (r *deckCardResolver) Card(ctx context.Context, obj *models.DeckCard) (*models.Card, error) {
	panic(fmt.Errorf("not implemented: Card - card"))
}

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, username string, email string, password string) (*models.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: Register - register"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, identifier string, password string) (*models.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context) (*models.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: RefreshToken - refreshToken"))
}

// CreateCard is the resolver for the createCard field.
func (r *mutationResolver) CreateCard(ctx context.Context, input models.CardInput) (*models.Card, error) {
	panic(fmt.Errorf("not implemented: CreateCard - createCard"))
}

// UpdateCard is the resolver for the updateCard field.
func (r *mutationResolver) UpdateCard(ctx context.Context, id string, input models.CardInput) (*models.Card, error) {
	panic(fmt.Errorf("not implemented: UpdateCard - updateCard"))
}

// DeleteCard is the resolver for the deleteCard field.
func (r *mutationResolver) DeleteCard(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteCard - deleteCard"))
}

// CreateDeck is the resolver for the createDeck field.
func (r *mutationResolver) CreateDeck(ctx context.Context, input types.DeckInput) (*models.Deck, error) {
	panic(fmt.Errorf("not implemented: CreateDeck - createDeck"))
}

// UpdateDeck is the resolver for the updateDeck field.
func (r *mutationResolver) UpdateDeck(ctx context.Context, id string, input types.DeckInput) (*models.Deck, error) {
	panic(fmt.Errorf("not implemented: UpdateDeck - updateDeck"))
}

// DeleteDeck is the resolver for the deleteDeck field.
func (r *mutationResolver) DeleteDeck(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteDeck - deleteDeck"))
}

// AddCardToDeck is the resolver for the addCardToDeck field.
func (r *mutationResolver) AddCardToDeck(ctx context.Context, deckID string, input types.DeckCardInput) (*models.DeckCard, error) {
	panic(fmt.Errorf("not implemented: AddCardToDeck - addCardToDeck"))
}

// UpdateDeckCard is the resolver for the updateDeckCard field.
func (r *mutationResolver) UpdateDeckCard(ctx context.Context, id string, quantity int) (*models.DeckCard, error) {
	panic(fmt.Errorf("not implemented: UpdateDeckCard - updateDeckCard"))
}

// RemoveCardFromDeck is the resolver for the removeCardFromDeck field.
func (r *mutationResolver) RemoveCardFromDeck(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: RemoveCardFromDeck - removeCardFromDeck"))
}

// ImportCollection is the resolver for the importCollection field.
func (r *mutationResolver) ImportCollection(ctx context.Context, input models.ImportSource, file graphql.Upload) (*models.ImportResult, error) {
	panic(fmt.Errorf("not implemented: ImportCollection - importCollection"))
}

// CreateCollection is the resolver for the createCollection field.
func (r *mutationResolver) CreateCollection(ctx context.Context, input models.CollectionInput) (*models.Collection, error) {
	panic(fmt.Errorf("not implemented: CreateCollection - createCollection"))
}

// UpdateCollection is the resolver for the updateCollection field.
func (r *mutationResolver) UpdateCollection(ctx context.Context, id string, input models.CollectionInput) (*models.Collection, error) {
	panic(fmt.Errorf("not implemented: UpdateCollection - updateCollection"))
}

// DeleteCollection is the resolver for the deleteCollection field.
func (r *mutationResolver) DeleteCollection(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteCollection - deleteCollection"))
}

// AddCardToCollection is the resolver for the addCardToCollection field.
func (r *mutationResolver) AddCardToCollection(ctx context.Context, collectionID string, input models.CollectionCardInput) (*models.CollectionCard, error) {
	panic(fmt.Errorf("not implemented: AddCardToCollection - addCardToCollection"))
}

// UpdateCollectionCard is the resolver for the updateCollectionCard field.
func (r *mutationResolver) UpdateCollectionCard(ctx context.Context, id string, input models.CollectionCardInput) (*models.CollectionCard, error) {
	panic(fmt.Errorf("not implemented: UpdateCollectionCard - updateCollectionCard"))
}

// RemoveCardFromCollection is the resolver for the removeCardFromCollection field.
func (r *mutationResolver) RemoveCardFromCollection(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: RemoveCardFromCollection - removeCardFromCollection"))
}

// ImportCards is the resolver for the importCards field.
func (r *mutationResolver) ImportCards(ctx context.Context, game string) (bool, error) {
	panic(fmt.Errorf("not implemented: ImportCards - importCards"))
}

// BulkImportCardsToCollection is the resolver for the bulkImportCardsToCollection field.
func (r *mutationResolver) BulkImportCardsToCollection(ctx context.Context, collectionID string, file graphql.Upload) (*models.BulkImportResult, error) {
	panic(fmt.Errorf("not implemented: BulkImportCardsToCollection - bulkImportCardsToCollection"))
}

// Card is the resolver for the card field.
func (r *queryResolver) Card(ctx context.Context, id string) (*models.Card, error) {
	panic(fmt.Errorf("not implemented: Card - card"))
}

// CardsByGame is the resolver for the cardsByGame field.
func (r *queryResolver) CardsByGame(ctx context.Context, game string, first *int, after *string) (*models.CardConnection, error) {
	panic(fmt.Errorf("not implemented: CardsByGame - cardsByGame"))
}

// CardsBySet is the resolver for the cardsBySet field.
func (r *queryResolver) CardsBySet(ctx context.Context, game string, setCode string) ([]*models.Card, error) {
	panic(fmt.Errorf("not implemented: CardsBySet - cardsBySet"))
}

// SearchCards is the resolver for the searchCards field.
func (r *queryResolver) SearchCards(ctx context.Context, game *string, setCode *string, rarity *string, name *string, page *int, pageSize *int, sortBy *string, sortOrder *string) (*types.CardSearchResult, error) {
	panic(fmt.Errorf("not implemented: SearchCards - searchCards"))
}

// CardFilters is the resolver for the cardFilters field.
func (r *queryResolver) CardFilters(ctx context.Context, game string) (*types.CardFilters, error) {
	panic(fmt.Errorf("not implemented: CardFilters - cardFilters"))
}

// CollectionCard is the resolver for the collectionCard field.
func (r *queryResolver) CollectionCard(ctx context.Context, id string) (*models.CollectionCard, error) {
	cardID, err := uuid.Parse(id)
	if err != nil {
		return nil, fmt.Errorf("invalid card ID: %w", err)
	}

	card, err := r.collectionStore.GetCard(cardID)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch collection card: %w", err)
	}

	return card, nil
}

// Deck is the resolver for the deck field.
func (r *queryResolver) Deck(ctx context.Context, id string) (*models.Deck, error) {
	panic(fmt.Errorf("not implemented: Deck - deck"))
}

// MyDecks is the resolver for the myDecks field.
func (r *queryResolver) MyDecks(ctx context.Context) ([]*models.Deck, error) {
	panic(fmt.Errorf("not implemented: MyDecks - myDecks"))
}

// DeckCards is the resolver for the deckCards field.
func (r *queryResolver) DeckCards(ctx context.Context, deckID string) ([]*models.DeckCard, error) {
	panic(fmt.Errorf("not implemented: DeckCards - deckCards"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*models.User, error) {
	panic(fmt.Errorf("not implemented: Me - me"))
}

// Collection is the resolver for the collection field.
func (r *queryResolver) Collection(ctx context.Context, id string) (*models.Collection, error) {
	panic(fmt.Errorf("not implemented: Collection - collection"))
}

// MyCollections is the resolver for the myCollections field.
func (r *queryResolver) MyCollections(ctx context.Context) ([]*models.Collection, error) {
	panic(fmt.Errorf("not implemented: MyCollections - myCollections"))
}

// CollectionCards is the resolver for the collectionCards field.
func (r *queryResolver) CollectionCards(ctx context.Context, collectionID string) ([]*models.CollectionCard, error) {
	panic(fmt.Errorf("not implemented: CollectionCards - collectionCards"))
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *models.User) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *userResolver) CreatedAt(ctx context.Context, obj *models.User) (string, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *userResolver) UpdatedAt(ctx context.Context, obj *models.User) (string, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// Card returns generated.CardResolver implementation.
func (r *Resolver) Card() generated.CardResolver { return &cardResolver{r} }

// CardSearchResult returns generated.CardSearchResultResolver implementation.
func (r *Resolver) CardSearchResult() generated.CardSearchResultResolver {
	return &cardSearchResultResolver{r}
}

// Collection returns generated.CollectionResolver implementation.
func (r *Resolver) Collection() generated.CollectionResolver { return &collectionResolver{r} }

// CollectionCard returns generated.CollectionCardResolver implementation.
func (r *Resolver) CollectionCard() generated.CollectionCardResolver {
	return &collectionCardResolver{r}
}

// Deck returns generated.DeckResolver implementation.
func (r *Resolver) Deck() generated.DeckResolver { return &deckResolver{r} }

// DeckCard returns generated.DeckCardResolver implementation.
func (r *Resolver) DeckCard() generated.DeckCardResolver { return &deckCardResolver{r} }

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type cardResolver struct{ *Resolver }
type cardSearchResultResolver struct{ *Resolver }
type collectionResolver struct{ *Resolver }
type collectionCardResolver struct{ *Resolver }
type deckResolver struct{ *Resolver }
type deckCardResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
