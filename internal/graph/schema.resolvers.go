package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/shiftregister-vg/card-craft/internal/auth"
	"github.com/shiftregister-vg/card-craft/internal/graph/generated"
	"github.com/shiftregister-vg/card-craft/internal/models"
	"github.com/shiftregister-vg/card-craft/internal/types"
)

// ID is the resolver for the id field.
func (r *cardResolver) ID(ctx context.Context, obj *models.Card) (string, error) {
	return obj.ID.String(), nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *cardResolver) CreatedAt(ctx context.Context, obj *models.Card) (string, error) {
	return obj.CreatedAt.Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *cardResolver) UpdatedAt(ctx context.Context, obj *models.Card) (string, error) {
	return obj.UpdatedAt.Format(time.RFC3339), nil
}

// TotalCount is the resolver for the totalCount field.
func (r *cardSearchResultResolver) TotalCount(ctx context.Context, obj *types.CardSearchResult) (int, error) {
	return obj.Total, nil
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *models.User) (string, error) {
	return obj.ID.String(), nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *userResolver) CreatedAt(ctx context.Context, obj *models.User) (string, error) {
	return obj.CreatedAt.Format(time.RFC3339), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *userResolver) UpdatedAt(ctx context.Context, obj *models.User) (string, error) {
	return obj.UpdatedAt.Format(time.RFC3339), nil
}

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, email string, password string) (*models.AuthPayload, error) {
	return r.authService.Register(email, password)
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (*models.AuthPayload, error) {
	return r.authService.Login(email, password)
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context) (*models.AuthPayload, error) {
	return r.authService.RefreshToken(ctx)
}

// CreateCard is the resolver for the createCard field.
func (r *mutationResolver) CreateCard(ctx context.Context, input types.CardInput) (*models.Card, error) {
	card := &models.Card{
		ID:       uuid.New(),
		Name:     input.Name,
		Game:     input.Game,
		SetCode:  input.SetCode,
		SetName:  input.SetName,
		Number:   input.Number,
		Rarity:   input.Rarity,
		ImageURL: derefString(input.ImageURL),
	}

	if err := r.cardStore.Create(card); err != nil {
		return nil, err
	}

	return card, nil
}

// UpdateCard is the resolver for the updateCard field.
func (r *mutationResolver) UpdateCard(ctx context.Context, id string, input types.CardInput) (*models.Card, error) {
	uuid, err := uuid.Parse(id)
	if err != nil {
		return nil, err
	}

	card, err := r.cardStore.FindByID(uuid)
	if err != nil {
		return nil, err
	}

	if card == nil {
		return nil, fmt.Errorf("card not found")
	}

	card.Name = input.Name
	card.Game = input.Game
	card.SetCode = input.SetCode
	card.SetName = input.SetName
	card.Number = input.Number
	card.Rarity = input.Rarity
	card.ImageURL = derefString(input.ImageURL)

	if err := r.cardStore.Update(card); err != nil {
		return nil, err
	}

	return card, nil
}

// DeleteCard is the resolver for the deleteCard field.
func (r *mutationResolver) DeleteCard(ctx context.Context, id string) (bool, error) {
	uuid, err := uuid.Parse(id)
	if err != nil {
		return false, err
	}

	if err := r.cardStore.Delete(uuid); err != nil {
		return false, err
	}

	return true, nil
}

// Card is the resolver for the card field.
func (r *queryResolver) Card(ctx context.Context, id string) (*models.Card, error) {
	uuid, err := uuid.Parse(id)
	if err != nil {
		return nil, err
	}

	return r.cardStore.FindByID(uuid)
}

// CardsByGame is the resolver for the cardsByGame field.
func (r *queryResolver) CardsByGame(ctx context.Context, game string) ([]*models.Card, error) {
	return r.cardStore.FindByGame(game)
}

// CardsBySet is the resolver for the cardsBySet field.
func (r *queryResolver) CardsBySet(ctx context.Context, game string, setCode string) ([]*models.Card, error) {
	return r.cardStore.FindBySet(game, setCode)
}

// SearchCards is the resolver for the searchCards field.
func (r *queryResolver) SearchCards(ctx context.Context, game *string, setCode *string, rarity *string, name *string, page *int, pageSize *int, sortBy *string, sortOrder *string) (*types.CardSearchResult, error) {
	opts := types.SearchOptions{
		Game:      derefString(game),
		SetCode:   derefString(setCode),
		Rarity:    derefString(rarity),
		Name:      derefString(name),
		Page:      derefInt(page),
		PageSize:  derefInt(pageSize),
		SortBy:    derefString(sortBy),
		SortOrder: derefString(sortOrder),
	}

	return r.searchService.Search(opts)
}

// CardFilters is the resolver for the cardFilters field.
func (r *queryResolver) CardFilters(ctx context.Context, game string) (*types.CardFilters, error) {
	return r.searchService.GetFilters(game)
}

// Helper functions for dereferencing optional parameters
func derefString(s *string) string {
	if s == nil {
		return ""
	}
	return *s
}

func derefInt(i *int) int {
	if i == nil {
		return 0
	}
	return *i
}

func (r *queryResolver) Me(ctx context.Context) (*models.User, error) {
	user := auth.GetUserFromContext(ctx)
	if user == nil {
		return nil, fmt.Errorf("not authenticated")
	}
	return user, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
