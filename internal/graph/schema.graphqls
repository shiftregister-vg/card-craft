type User {
  id: ID!
  username: String!
  email: String!
  createdAt: String!
  updatedAt: String!
}

type AuthPayload {
  token: String!
  user: User!
}

type Card {
  id: ID!
  name: String!
  game: String!
  setCode: String!
  setName: String!
  number: String!
  rarity: String!
  imageUrl: String!
  createdAt: String!
  updatedAt: String!
}

type Deck {
  id: ID!
  name: String!
  description: String
  game: String!
  userId: ID!
  createdAt: String!
  updatedAt: String!
  cards: [DeckCard!]!
}

type DeckCard {
  id: ID!
  deckId: ID!
  cardId: ID!
  quantity: Int!
  createdAt: String!
  updatedAt: String!
  card: Card!
}

input CardInput {
  name: String!
  game: String!
  setCode: String!
  setName: String!
  number: String!
  rarity: String!
  imageUrl: String
}

input DeckInput {
  name: String!
  description: String
  game: String!
}

input DeckCardInput {
  cardId: ID!
  quantity: Int!
}

type CardSearchResult {
  cards: [Card!]!
  totalCount: Int!
  page: Int!
  pageSize: Int!
}

type CardFilters {
  sets: [String!]!
  rarities: [String!]!
}

type Collection {
  id: ID!
  userId: ID!
  name: String!
  description: String
  game: String!
  cards: [CollectionCard!]!
  createdAt: String!
  updatedAt: String!
}

type CollectionCard {
  id: ID!
  collectionId: ID!
  cardId: ID!
  card: Card!
  quantity: Int!
  condition: String!
  isFoil: Boolean!
  notes: String!
  createdAt: String!
  updatedAt: String!
}

input CollectionInput {
  name: String!
  description: String
  game: String!
}

input CollectionCardInput {
  cardId: ID!
  quantity: Int!
  condition: String
  isFoil: Boolean
  notes: String
}

type CardConnection {
  edges: [CardEdge!]!
  pageInfo: PageInfo!
}

type CardEdge {
  node: Card!
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  endCursor: String
}

type Query {
  # Card queries
  card(id: ID!): Card
  cardsByGame(game: String!, first: Int, after: String): CardConnection!
  cardsBySet(game: String!, setCode: String!): [Card!]!
  searchCards(
    game: String
    setCode: String
    rarity: String
    name: String
    page: Int
    pageSize: Int
    sortBy: String
    sortOrder: String
  ): CardSearchResult!
  cardFilters(game: String!): CardFilters!
  
  # Deck queries
  deck(id: ID!): Deck
  myDecks: [Deck!]!
  deckCards(deckId: ID!): [DeckCard!]!

  # User queries
  me: User

  # Collection queries
  collection(id: ID!): Collection
  myCollections: [Collection!]!
  collectionCards(collectionId: ID!): [CollectionCard!]!
}

type Mutation {
  # Authentication mutations
  register(username: String!, email: String!, password: String!): AuthPayload!
  login(identifier: String!, password: String!): AuthPayload!
  refreshToken: AuthPayload!
  
  # Card mutations
  createCard(input: CardInput!): Card!
  updateCard(id: ID!, input: CardInput!): Card!
  deleteCard(id: ID!): Boolean!
  
  # Deck mutations
  createDeck(input: DeckInput!): Deck!
  updateDeck(id: ID!, input: DeckInput!): Deck!
  deleteDeck(id: ID!): Boolean!
  addCardToDeck(deckId: ID!, input: DeckCardInput!): DeckCard!
  updateDeckCard(id: ID!, quantity: Int!): DeckCard!
  removeCardFromDeck(id: ID!): Boolean!
  
  # Import mutations
  importCollection(input: ImportSource!, file: Upload!): ImportResult!

  # Collection mutations
  createCollection(input: CollectionInput!): Collection!
  updateCollection(id: ID!, input: CollectionInput!): Collection!
  deleteCollection(id: ID!): Boolean!
  
  addCardToCollection(collectionId: ID!, input: CollectionCardInput!): CollectionCard!
  updateCollectionCard(id: ID!, input: CollectionCardInput!): CollectionCard!
  removeCardFromCollection(id: ID!): Boolean!
  
  # Import cards for a specific game
  importCards(game: String!): Boolean!
  
  # Bulk import cards into a collection
  bulkImportCardsToCollection(collectionId: ID!, file: Upload!): BulkImportResult!
}

type ImportResult {
  totalCards: Int!
  importedCards: Int!
  updatedCards: Int!
  errors: [String!]!
}

input ImportSource {
  source: String!  # e.g. "tcgcollector"
  format: String!  # e.g. "csv"
}

scalar Upload

# Result of bulk import operation
type BulkImportResult {
  success: Boolean!
  importedCount: Int!
  errors: [ImportError!]
}

type ImportError {
  cardId: String!
  message: String!
} 